BootStrap: docker
From: nvidia/cuda:11.2.2-devel-ubuntu20.04

%environment
  # export locales
  export LC_ALL=en_US.UTF-8
  export LANG=en_US.UTF-8
  export LANGUAGE=en_US.UTF-8

  # export venvwrapper
  export WORKON_HOME=/venvs
  export VIRTUALENVWRAPPER_PYTHON='/usr/bin/python3'

  # OpenCV
  export OpenCV_DIR=/src/opencv/build/

  # YCM
  export YCM_DIR=/src/ycm/build/

%post
  # update package index from sources list
  apt update

  # force non-interactive setup
  export DEBIAN_FRONTEND=noninteractive

  # setup locales
  apt install -y locales
  echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
  locale-gen en_US.utf8
  /usr/sbin/update-locale LANG=en_US.UTF-8

  export LC_ALL=en_US.UTF-8
  export LANG=en_US.UTF-8
  export LANGUAGE=en_US.UTF-8

  # these libraries are required to provide X11/GUI facilities to clients
  apt install -y libsm6 libxi6 libxrender1 libxtst6 libx11-xcb-dev python3-tk

  # install commonly used tools
  apt install -y build-essential git htop iputils-ping wget pybind11-dev

  # update CMake
  apt install -y apt-transport-https ca-certificates gnupg software-properties-common
  wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
  apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'
  apt install -y cmake cmake-curses-gui

  # install commonly used editors
  apt install -y emacs-nox nano vim

  # python and virtualenvs
  apt install -y python3 python3-pip
  pip3 install virtualenvwrapper
  mkdir /venvs
  chmod 777 /venvs

  # upgrade
  apt upgrade -y

  # create files required to interact with tools exposed by the NVIDIA driver on the host
  touch /etc/localtime
  touch /usr/bin/nvidia-smi
  touch /usr/bin/nvidia-debugdump
  touch /usr/bin/nvidia-persistenced
  touch /usr/bin/nvidia-cuda-mps-control
  touch /usr/bin/nvidia-cuda-mps-server
  mkdir -p /run/nvidia-persistenced
  touch /run/nvidia-persistenced/socket

  # OpenCV
  apt install -y libgtk2.0-dev

  mkdir /src
  cd /src
  git clone https://github.com/opencv/opencv
  git clone https://github.com/opencv/opencv_contrib

  cd /src/opencv_contrib
  git checkout 4.5.2

  cd /src/opencv
  git checkout 4.5.2
  mkdir build
  cd build
  cmake -DENABLE_FAST_MATH=ON -DOPENCV_ENABLE_NONFREE=ON -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules/ -DWITH_TBB=ON -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DOPENCV_DNN_CUDA=OFF -DWITH_CUDA=ON -DWITH_CUDNN=OFF -DCUDA_FAST_MATH=ON -DWITH_GTK_2_X=ON -DCUDA_GENERATION=Ampere ../
  make -j10

  # robotology superbuild
  git config --global user.name "user"
  git config --global user.email "user@email.com"

  apt install -y build-essential cmake cmake-curses-gui coinor-libipopt-dev freeglut3-dev git libace-dev libboost-filesystem-dev libboost-system-dev libboost-thread-dev libdc1394-22-dev libedit-dev libeigen3-dev libgsl0-dev libjpeg-dev liblua5.1-dev libode-dev libsdl1.2-dev libtinyxml-dev libv4l-dev libxml2-dev lua5.1 portaudio19-dev qml-module-qt-labs-folderlistmodel qml-module-qt-labs-settings qml-module-qtmultimedia qml-module-qtquick-controls qml-module-qtquick-dialogs qml-module-qtquick-window2 qml-module-qtquick2 qtbase5-dev qtdeclarative5-dev qtmultimedia5-dev swig libmatio-dev libirrlicht-dev libspdlog-dev libblas-dev liblapack-dev

  cd /src
  git clone https://github.com/robotology/ycm
  cd ycm
  mkdir build
  mkdir build/install
  cd build
  cmake -DCMAKE_INSTALL_PREFIX=/src/ycm/build/install ../
  make install
  export YCM_DIR=/src/ycm/build

  cd /src
  git clone https://github.com/robotology/robotology-superbuild
  cd /src/robotology-superbuild
  mkdir build
  cd build
  cmake -DROBOTOLOGY_ENABLE_CORE=ON -DROBOTOLOGY_USES_GAZEBO=OFF -DROBOTOLOGY_USES_PYTHON=ON -DYCM_EP_ADDITIONAL_CMAKE_ARGS:STRING="-DOpenCV_DIR=/src/opencv/build -DICUB_COMPILE_BINDINGS:BOOL=ON -DCREATE_PYTHON:BOOL=ON -DENABLE_yarpmod_RGBDSensorWrapper:BOOL=ON -DENABLE_yarpmod_RGBDSensorClient:BOOL=ON -DENABLE_yarpcar_mjpeg:BOOL=ON" ../
  make -j10

  # superimpose-mesh-lib
  apt install -y libassimp-dev libglfw3-dev libglew-dev libglm-dev
  cd /src
  git clone https://github.com/xenvre/superimpose-mesh-lib
  cd superimpose-mesh-lib
  git checkout of-aided-tracking
  mkdir build
  cd build
  cmake -DOpenCV_DIR=/src/opencv/build -DCMAKE_INSTALL_PREFIX=/src/robotology-superbuild/build/install ../
  make -j10 install

  # bayes-filters-lib
  cd /src
  git clone https://github.com/xenvre/bayes-filters-lib
  cd bayes-filters-lib
  git checkout of-aided-tracking
  mkdir build
  cd build
  cmake -DCMAKE_INSTALL_PREFIX=/src/robotology-superbuild/build/install ../
  make -j10 install

  # nanoflann
  cd /src
  git clone https://github.com/jlblancoc/nanoflann
  cd nanoflann
  mkdir build
  cd build
  cmake -DCMAKE_INSTALL_PREFIX=/src/robotology-superbuild/build/install ../
  make -j10 install

  # robots-io
  cd /src
  git clone https://github.com/xenvre/robots-io
  cd robots-io
  mkdir build
  cd build
  cmake -DOpenCV_DIR=/src/opencv/build -DCMAKE_INSTALL_PREFIX=/src/robotology-superbuild/build/install -DUSE_YARP=ON ../
  make -j10 install

  # object-tracking-lib
  # apt install -y libmlpack-dev
  # cd /src
  # git clone https://github.com/xenvre/object-tracking-lib
  # cd object-tracking-lib
  # mkdir build
  # cd build
  # cmake -DOpenCV_DIR=/src/opencv/build -DCMAKE_INSTALL_PREFIX=/src/robotology-superbuild/build/install -DUSE_SUPERIMPOSE=ON ../
  # make -j10 install

%runscript
  # activate the venvwrapper
  source /usr/local/bin/virtualenvwrapper.sh
