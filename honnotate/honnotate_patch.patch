diff --git a/HOdatasets/mypaths.py b/HOdatasets/mypaths.py
index 7488c9d..48ad5a2 100644
--- a/HOdatasets/mypaths.py
+++ b/HOdatasets/mypaths.py
@@ -1,9 +1,9 @@
 import os
 
-HO3D_MULTI_CAMERA_DIR = '/media/shreyas/ssd2/Dataset/HO3D_multicamera/testSeq_for_release'
+HO3D_MULTI_CAMERA_DIR = '/HOnnotate/test'
 
-YCB_MODELS_DIR = '/media/shreyas/9bd75a15-11bb-4a7b-b4b3-ed9ba08f238d/Downloads/YCB_Video_Dataset/YCB_Video_Models/models/'
+YCB_MODELS_DIR = '/HOnnotate/YCB_Video_Models/models/'
 
 YCB_OBJECT_CORNERS_DIR = os.path.join(os.path.dirname(os.path.realpath(__file__)), '../objCorners')
 
-MANO_MODEL_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '../optimization/mano/models/MANO_RIGHT.pkl')
\ No newline at end of file
+MANO_MODEL_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '../optimization/mano/models/MANO_RIGHT.pkl')
diff --git a/optimization/ghope/loss.py b/optimization/ghope/loss.py
index aae6ca3..4cf6477 100644
--- a/optimization/ghope/loss.py
+++ b/optimization/ghope/loss.py
@@ -103,8 +103,8 @@ class LossObservs():
         gaussKernel = gaussKernel.astype(np.float32)
         # if len(err.shape) == 4:
         #     gaussKernel = np.stack([gaussKernel, gaussKernel, gaussKernel], axis=2)
-        gaussKernel = np.expand_dims(gaussKernel, 3)
-        gaussKernel = np.expand_dims(gaussKernel, 3)
+        gaussKernel = np.expand_dims(gaussKernel, -1)
+        gaussKernel = np.expand_dims(gaussKernel, -1)
         gaussKernel = tf.tile(gaussKernel, [1, 1, tf.shape(err)[-1], 1])
 
         gaussErr = tf.nn.conv2d(err, gaussKernel, strides=[1, 1, 1, 1], padding="VALID")
@@ -253,5 +253,3 @@ class LossObservs():
         varList = tf.cond(loadInits, lambda: loadVars(varList), lambda: dummyFunc(varList))
 
         return
-
-
diff --git a/optimization/ghope/scene.py b/optimization/ghope/scene.py
index 0baf7e2..4b1cc02 100644
--- a/optimization/ghope/scene.py
+++ b/optimization/ghope/scene.py
@@ -1075,6 +1075,3 @@ class Scene():
 
 
         return varList
-
-
-
diff --git a/optimization/handPoseMultiframe.py b/optimization/handPoseMultiframe.py
index 77693f7..c488b83 100644
--- a/optimization/handPoseMultiframe.py
+++ b/optimization/handPoseMultiframe.py
@@ -425,13 +425,14 @@ def handPoseMF(w, h, objParamInitList, handParamInitList, objMesh, camProp, out_
 
     o3d.io.write_triangle_mesh(out_dir+'/'+'hand.ply', finalHandMesh)
     o3d.io.write_triangle_mesh(out_dir + '/' + 'object.ply', finalObjMesh)
-    vis = o3d.visualization.Visualizer()
-    vis.create_window(window_name='Open3D', width=640, height=480, left=0, top=0,
-                      visible=True)  # use visible=True to visualize the point cloud
-    vis.get_render_option().light_on = False
-    vis.add_geometry(finalHandMesh)
-    vis.add_geometry(finalObjMesh)
-    vis.run()
+    if FLAGS.showFig:
+        vis = o3d.visualization.Visualizer()
+        vis.create_window(window_name='Open3D', width=640, height=480, left=0, top=0,
+                          visible=True)  # use visible=True to visualize the point cloud
+        vis.get_render_option().light_on = False
+        vis.add_geometry(finalHandMesh)
+        vis.add_geometry(finalObjMesh)
+        vis.run()
 
     return
 
@@ -705,6 +706,3 @@ if __name__ == '__main__':
         myGen = dataGen(w, h)
         frameID, handMask, handDepth, col, mask = next(myGen)
         a = 10
-
-
-
diff --git a/optimization/manoTF/batch_lbs.py b/optimization/manoTF/batch_lbs.py
index 10a2226..59eff27 100644
--- a/optimization/manoTF/batch_lbs.py
+++ b/optimization/manoTF/batch_lbs.py
@@ -48,7 +48,7 @@ def batch_skew(vec, batch_size=None):
 
     returns N x 3 x 3. Skew_sym version of each matrix.
     """
-    with tf.name_scope("batch_skew", [vec]):
+    with tf.name_scope("batch_skew", values = [vec]):
         if batch_size is None:
             batch_size = vec.shape.as_list()[0]
         col_inds = tf.constant([1, 2, 3, 5, 6, 7])
@@ -73,7 +73,7 @@ def batch_rodrigues(theta, name=None):
     """
     Theta is N x 3
     """
-    with tf.name_scope(name, "batch_rodrigues", [theta]):
+    with tf.name_scope(name, "batch_rodrigues", values = [theta]):
         batch_size = tf.shape(theta)[0]
 
         # angle = tf.norm(theta, axis=1)
@@ -107,7 +107,7 @@ def batch_lrotmin(theta, name=None):
     Returns
       diff_vec : `Tensor`: N x 135 rotation matrix of 23=(K-1) joints with identity subtracted.,
     """
-    with tf.name_scope(name, "batch_lrotmin", [theta]):
+    with tf.name_scope(name, "batch_lrotmin", values = [theta]):
         with tf.name_scope("ignore_global"):
             theta = theta[:, 3:]
 
@@ -134,7 +134,7 @@ def batch_global_rigid_transformation(Rs, Js, parent, rotate_base=False):
       new_J : `Tensor`: N x 16 x 3 location of absolute joints
       A     : `Tensor`: N x 16 4 x 4 relative joint transformations for LBS.
     """
-    with tf.name_scope("batch_forward_kinematics", [Rs, Js]):
+    with tf.name_scope("batch_forward_kinematics", values = [Rs, Js]):
         N = tf.shape(Rs)[0]
         if rotate_base:
             print('Flipping the MANO coordinate frame!!!!')
@@ -150,7 +150,7 @@ def batch_global_rigid_transformation(Rs, Js, parent, rotate_base=False):
 
         def make_A(R, t, name=None):
             # Rs is N x 3 x 3, ts is N x 3 x 1
-            with tf.name_scope(name, "Make_A", [R, t]):
+            with tf.name_scope(name, "Make_A", values = [R, t]):
                 R_homo = tf.pad(R, [[0, 0], [0, 1], [0, 0]])
                 t_homo = tf.concat([t, tf.ones([N, 1, 1])], 1)
                 return tf.concat([R_homo, t_homo], 2)
